{"version":3,"file":"index.js","sources":["src/helpers/take.js","src/middleware.js"],"sourcesContent":["import { isRegExp, isString, isFunction } from 'lodash'\n\nconst take = (action, tree) => (match, callback) => {\n  const isMatching = false\n    || (isString(match) && match === action.fullpath)\n    || (isFunction(match) && match(action, tree))\n    || (isRegExp(match) && action.fullpath.match(match))\n\n  if (isMatching) return callback(action, tree)\n  return false\n}\n\nconst ended = takeImpl => (action, tree) => {\n  if (action.ended) return takeImpl(action, tree)\n  return () => false\n}\n\ntake.ended = ended(take)\n\nexport default take\n","import { getPath } from 'mobx-state-tree'\n\nconst getAction = (call) => {\n  const {\n    name,\n    type,\n    context,\n    args,\n  } = call\n\n  const path = getPath(context)\n  const fullpath = `${path}/${name}`\n\n  const action = {\n    fullpath,\n    path,\n    name,\n    args,\n  }\n\n  switch (type) {\n    case 'process_return': return { ...action, ended: true }\n    case 'action': return action\n    default: return undefined\n  }\n}\n\nexport default dispatch => (call, next) => {\n  const action = getAction(call)\n\n  if (action) dispatch(action, call.tree)\n\n  return next(call)\n}\n"],"names":["take","action","tree","match","callback","isString","fullpath","isFunction","isRegExp","ended","takeImpl","getAction","call","name","type","context","args","path","getPath","next","dispatch"],"mappings":"+SAEA,IAAMA,EAAO,SAACC,EAAQC,UAAS,SAACC,EAAOC,YAE/BC,WAASF,IAAUA,IAAUF,EAAOK,UACpCC,aAAWJ,IAAUA,EAAMF,EAAQC,IACnCM,WAASL,IAAUF,EAAOK,SAASH,MAAMA,KAExBC,EAASH,EAAQC,KAS1CF,EAAKS,MALS,mBAAY,SAACR,EAAQC,UAC7BD,EAAOQ,MAAcC,EAAST,EAAQC,GACnC,kBAAM,IAGFO,CAAMT,skCCfbW,EAAY,SAACC,OAEfC,EAIED,EAJFC,KACAC,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,QACAC,EACEJ,EADFI,KAGIC,EAAOC,UAAQH,GAGfd,YAFcgB,MAAQJ,+BASpBC,OACD,6BAA8Bb,GAAQQ,OAAO,QAC7C,gBAAiBR,gDAKC,SAACW,EAAMO,OAC1BlB,EAASU,EAAUC,UAErBX,GAAQmB,EAASnB,EAAQW,EAAKV,MAE3BiB,EAAKP"}