{"version":3,"file":"index.js","sources":["src/helpers/take.js","src/runners/runArray.js","src/runners/runFunction.js","src/getAction.js","src/middleware.js"],"sourcesContent":["import { isRegExp, isString, isFunction } from 'lodash'\n\nconst take = (match, callback) => (action, tree) => {\n  const isMatching = false\n    || (isString(match) && match === action.fullpath)\n    || (isFunction(match) && match(action, tree))\n    || (isRegExp(match) && action.fullpath.match(match))\n\n  if (isMatching) return callback(action, tree)\n  return false\n}\n\nconst ended = (match, callback) => (action, tree) => {\n  if (action.ended) return take(match, callback)(action, tree)\n  return false\n}\n\ntake.ended = ended\n\nexport default take\n","export default (dispatch, action, tree) => {\n  dispatch.forEach(runner => runner(action, tree))\n}\n","import { isArray } from 'lodash'\n\nexport default (dispatch, action, tree) => {\n  const dispatchCall = dispatch(action, tree)\n  if (!dispatchCall) return\n  if (isArray(dispatchCall)) dispatchCall.forEach(runner => runner(action, tree))\n}\n","import { getPath } from 'mobx-state-tree'\n\nexport default (call) => {\n  const {\n    name,\n    type,\n    context,\n    args,\n  } = call\n\n  const path = getPath(context)\n  const fullpath = `${path}/${name}`\n\n  const action = {\n    fullpath,\n    path,\n    name,\n    args,\n  }\n\n  switch (type) {\n    case 'process_return': return { ...action, ended: true }\n    case 'action': return action\n    default: return undefined\n  }\n}\n","import { isArray, isFunction } from 'lodash'\nimport { runArray, runFunction } from './runners'\nimport getAction from './getAction'\n\nconst run = dispatch => (action, tree) => {\n  if (isFunction(dispatch)) return runFunction(dispatch, action, tree)\n  if (isArray(dispatch)) return runArray(dispatch, action, tree)\n\n  throw new Error('[trampss-mst-onaction] unknow dispatch type')\n}\n\nexport default (dispatch) => {\n  const runDispatch = run(dispatch)\n\n  return (call, next) => {\n    const action = getAction(call)\n\n    if (action) runDispatch(action, call.tree)\n\n    return next(call)\n  }\n}\n"],"names":["take","match","callback","action","tree","isString","fullpath","isFunction","isRegExp","ended","dispatch","forEach","runner","dispatchCall","isArray","call","name","type","context","args","path","getPath","run","runFunction","runArray","Error","runDispatch","next","getAction"],"mappings":"+SAEA,IAAMA,EAAO,SAACC,EAAOC,UAAa,SAACC,EAAQC,YAEnCC,WAASJ,IAAUA,IAAUE,EAAOG,UACpCC,aAAWN,IAAUA,EAAME,EAAQC,IACnCI,WAASP,IAAUE,EAAOG,SAASL,MAAMA,KAExBC,EAASC,EAAQC,KAS1CJ,EAAKS,MALS,SAACR,EAAOC,UAAa,SAACC,EAAQC,WACtCD,EAAOM,OAAcT,EAAKC,EAAOC,EAAZF,CAAsBG,EAAQC,KCbzD,eAAgBM,EAAUP,EAAQC,KACvBO,QAAQ,mBAAUC,EAAOT,EAAQC,iBCC5BM,EAAUP,EAAQC,OAC1BS,EAAeH,EAASP,EAAQC,GACjCS,GACDC,UAAQD,IAAeA,EAAaF,QAAQ,mBAAUC,EAAOT,EAAQC,ilCCH3DW,OAEZC,EAIED,EAJFC,KACAC,EAGEF,EAHFE,KACAC,EAEEH,EAFFG,QACAC,EACEJ,EADFI,KAGIC,EAAOC,UAAQH,GAGff,YAFciB,MAAQJ,+BASpBC,OACD,6BAA8Bd,GAAQM,OAAO,QAC7C,gBAAiBN,mBClBpBmB,EAAM,mBAAY,SAACnB,EAAQC,MAC3BG,aAAWG,GAAW,OAAOa,EAAYb,EAAUP,EAAQC,MAC3DU,UAAQJ,GAAW,OAAOc,EAASd,EAAUP,EAAQC,SAEnD,IAAIqB,MAAM,oEAGFf,OACRgB,EAAcJ,EAAIZ,UAEjB,SAACK,EAAMY,OACNxB,EAASyB,EAAUb,UAErBZ,GAAQuB,EAAYvB,EAAQY,EAAKX,MAE9BuB,EAAKZ"}